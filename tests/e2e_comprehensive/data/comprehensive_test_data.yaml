# Comprehensive Test Data for Memory MCP Server E2E Tests
# This file contains all possible combinations of fields for testing the remember tool

test_suite:
  name: "Memory MCP Server Comprehensive E2E Tests"
  version: "1.0.0"
  description: "Complete test coverage for all field combinations"

# Basic required fields only (minimal valid data)
minimal_memories:
  - test_id: "minimal_tech_1"
    input:
      type: "tech"
      title: "Minimal Tech Memory"
      content: "This is the minimal required content for a tech memory"
    expected:
      success: true
      action: "created"
      
  - test_id: "minimal_project_tech_1"
    input:
      type: "project-tech"
      title: "Minimal Project Tech Memory"
      content: "This is the minimal required content for a project-tech memory"
    expected:
      success: true
      action: "created"
      
  - test_id: "minimal_domain_1"
    input:
      type: "domain"
      title: "Minimal Domain Memory"
      content: "This is the minimal required content for a domain memory"
    expected:
      success: true
      action: "created"

# With single example variations
single_example_memories:
  - test_id: "tech_single_example_1"
    input:
      type: "tech"
      title: "Tech with Single Example"
      content: "Technical content with one example"
      examples:
        - "async fn fetch_data() -> Result<Data> { Ok(Data::new()) }"
    expected:
      success: true
      action: "created"
      
  - test_id: "project_tech_single_example_1"
    input:
      type: "project-tech"
      title: "Project Tech with Single Example"
      content: "Project-specific technical content with example"
      examples:
        - "use crate::memory::service::MemoryService;"
    expected:
      success: true
      action: "created"

# With multiple examples variations
multiple_examples_memories:
  - test_id: "tech_two_examples_1"
    input:
      type: "tech"
      title: "Tech with Two Examples"
      content: "Technical content with multiple examples"
      examples:
        - "let result = calculate(x, y);"
        - "assert_eq!(result, expected);"
    expected:
      success: true
      action: "created"
      
  - test_id: "tech_three_examples_1"
    input:
      type: "tech"
      title: "Tech with Three Examples"
      content: "Technical content with three examples showing different patterns"
      examples:
        - "// Pattern 1: Direct approach\nlet data = fetch().await?;"
        - "// Pattern 2: With error handling\nmatch fetch().await { Ok(d) => d, Err(e) => return Err(e) }"
        - "// Pattern 3: With retry\nretry_with_backoff(|| fetch()).await?"
    expected:
      success: true
      action: "created"

# With single tag variations
single_tag_memories:
  - test_id: "tech_single_tag_1"
    input:
      type: "tech"
      title: "Tech with Single Tag"
      content: "Content with one tag"
      tags:
        - "rust"
    expected:
      success: true
      action: "created"
      
  - test_id: "project_tech_single_tag_1"
    input:
      type: "project-tech"
      title: "Project Tech with Single Tag"
      content: "Project content with one tag"
      tags:
        - "async"
    expected:
      success: true
      action: "created"

# With multiple tags variations
multiple_tags_memories:
  - test_id: "tech_two_tags_1"
    input:
      type: "tech"
      title: "Tech with Two Tags"
      content: "Content with multiple tags"
      tags:
        - "rust"
        - "async"
    expected:
      success: true
      action: "created"
      
  - test_id: "tech_many_tags_1"
    input:
      type: "tech"
      title: "Tech with Many Tags"
      content: "Content with many tags for comprehensive categorization"
      tags:
        - "rust"
        - "async"
        - "tokio"
        - "error-handling"
        - "testing"
    expected:
      success: true
      action: "created"

# Complex combinations
complex_combinations:
  - test_id: "full_featured_tech_1"
    input:
      type: "tech"
      title: "Fully Featured Tech Memory"
      content: "This memory has all optional fields populated with rich content"
      tags:
        - "rust"
        - "async"
        - "best-practices"
      examples:
        - "async fn complex_operation() -> Result<()> { /* implementation */ }"
        - "use tokio::sync::RwLock;"
        - "#[tokio::test]\nasync fn test_complex() { assert!(true); }"
    expected:
      success: true
      action: "created"
      
  - test_id: "full_featured_project_1"
    input:
      type: "project-tech"
      title: "Complete Project Memory"
      content: "Project-specific memory with all fields for MCP server implementation"
      tags:
        - "mcp"
        - "rmcp"
        - "memory-service"
      examples:
        - "let server = MemoryMcpServer::new(&db_path)?;"
        - "server.remember(params).await?"
    expected:
      success: true
      action: "created"

# Edge cases and special characters
edge_cases:
  - test_id: "unicode_content_1"
    input:
      type: "tech"
      title: "Êó•Êú¨Ë™û„ÅÆ„Çø„Ç§„Éà„É´"
      content: "Unicode content: ‰Ω†Â•Ω‰∏ñÁïå üöÄ emoji support"
      tags:
        - "ÂõΩÈöõÂåñ"
        - "unicode"
      examples:
        - "let greeting = \"„Åì„Çì„Å´„Å°„ÅØ\";"
    expected:
      success: true
      action: "created"
      
  - test_id: "special_chars_1"
    input:
      type: "tech"
      title: "Special @#$% Characters & Symbols"
      content: "Content with <HTML> tags & \"quotes\" and 'apostrophes'"
      tags:
        - "special-chars"
        - "edge-case"
    expected:
      success: true
      action: "created"
      
  - test_id: "very_long_content_1"
    input:
      type: "tech"
      title: "Memory with Very Long Content"
      content: |
        This is a very long content that spans multiple lines and contains a lot of information.
        It is designed to test how the system handles large amounts of text data.
        
        ## Section 1: Introduction
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        
        ## Section 2: Technical Details
        ```rust
        fn long_function_with_many_parameters(
            param1: String,
            param2: Vec<i32>,
            param3: HashMap<String, Value>,
            param4: Option<ComplexType>,
        ) -> Result<ProcessedData, Error> {
            // Complex implementation here
            unimplemented!()
        }
        ```
        
        ## Section 3: Conclusion
        This content continues for many more lines to ensure we test the system's ability to handle large text blocks effectively.
        The total size of this content exceeds 1000 characters to properly stress test the storage and retrieval mechanisms.
      tags:
        - "long-content"
        - "stress-test"
      examples:
        - "// Example 1: Basic usage\nlong_function_with_many_parameters(s, vec![1,2,3], map, None)?"
        - "// Example 2: With all parameters\nlong_function_with_many_parameters(s, vec, map, Some(complex))?"
    expected:
      success: true
      action: "created"

# Empty field variations (testing null vs empty)
empty_field_variations:
  - test_id: "empty_tags_array_1"
    input:
      type: "tech"
      title: "Memory with Empty Tags Array"
      content: "Content with explicitly empty tags array"
      tags: []
    expected:
      success: true
      action: "created"
      
  - test_id: "empty_examples_array_1"
    input:
      type: "tech"
      title: "Memory with Empty Examples Array"
      content: "Content with explicitly empty examples array"
      examples: []
    expected:
      success: true
      action: "created"
      
  - test_id: "both_empty_arrays_1"
    input:
      type: "tech"
      title: "Memory with Both Empty Arrays"
      content: "Content with both tags and examples as empty arrays"
      tags: []
      examples: []
    expected:
      success: true
      action: "created"

# Duplicate detection tests
duplicate_tests:
  - test_id: "original_for_duplicate_1"
    input:
      type: "tech"
      title: "Duplicate Test Memory"
      content: "Original content for duplicate detection"
      tags:
        - "test"
    expected:
      success: true
      action: "created"
      
  - test_id: "duplicate_same_title_type_1"
    input:
      type: "tech"
      title: "Duplicate Test Memory"  # Same title and type as above
      content: "Updated content for the same title"
      tags:
        - "updated"
    expected:
      success: true
      action: "updated"  # Should update, not create new

# Content size variations
content_size_variations:
  - test_id: "tiny_content_1"
    input:
      type: "tech"
      title: "Tiny Content"
      content: "A"  # Single character
    expected:
      success: true
      action: "created"
      
  - test_id: "short_content_1"
    input:
      type: "tech"
      title: "Short Content"
      content: "This is a short content under 100 characters."
    expected:
      success: true
      action: "created"
      
  - test_id: "medium_content_1"
    input:
      type: "tech"
      title: "Medium Content"
      content: |
        This is medium-sized content that is between 100 and 1000 characters.
        It contains multiple sentences and provides a reasonable amount of information.
        This type of content is typical for most memory entries in the system.
        It's not too short to be unhelpful, and not too long to be overwhelming.
        The content provides good context and examples for future reference.
    expected:
      success: true
      action: "created"

# Tag size and format variations
tag_variations:
  - test_id: "single_char_tag_1"
    input:
      type: "tech"
      title: "Single Character Tag"
      content: "Testing single character tags"
      tags:
        - "a"
    expected:
      success: true
      action: "created"
      
  - test_id: "very_long_tag_1"
    input:
      type: "tech"
      title: "Very Long Tag Name"
      content: "Testing very long tag names"
      tags:
        - "this-is-a-very-long-tag-name-that-exceeds-typical-length-expectations-and-tests-the-system-limits"
    expected:
      success: true
      action: "created"
      
  - test_id: "numeric_tags_1"
    input:
      type: "tech"
      title: "Numeric Tags"
      content: "Testing numeric and alphanumeric tags"
      tags:
        - "2024"
        - "v1.0.0"
        - "rust-1.75"
    expected:
      success: true
      action: "created"

# Example content variations
example_variations:
  - test_id: "single_line_example_1"
    input:
      type: "tech"
      title: "Single Line Example"
      content: "Memory with single line example"
      examples:
        - "let x = 42;"
    expected:
      success: true
      action: "created"
      
  - test_id: "multiline_example_1"
    input:
      type: "tech"
      title: "Multiline Example"
      content: "Memory with multiline code example"
      examples:
        - |
          fn complex_function() -> Result<()> {
              let data = fetch_data().await?;
              process(data)?;
              Ok(())
          }
    expected:
      success: true
      action: "created"
      
  - test_id: "mixed_examples_1"
    input:
      type: "tech"
      title: "Mixed Example Types"
      content: "Memory with different types of examples"
      examples:
        - "Simple: let x = 1;"
        - "Command: cargo test --all"
        - "Config: { \"key\": \"value\" }"
        - |
          Complex:
          fn main() {
              println!("Hello");
          }
    expected:
      success: true
      action: "created"